/* -LICENSE-START-
** Copyright (c) 2011 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
** 
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

#import "ATEMCommander.h"
#include <libkern/OSAtomic.h>
#include <string>
#import <list>


static inline bool	operator== (const REFIID& iid1, const REFIID& iid2)
{ 
	return CFEqual(&iid1, &iid2);
}

// Callback class for monitoring property changes on a mix effect block.
class MixEffectBlockMonitor : public IBMDSwitcherMixEffectBlockCallback
{
public:
	MixEffectBlockMonitor (ATEMCommanderDelegate* uiDelegate)  : mUiDelegate(uiDelegate), mRefCount(1) { }

protected:
	virtual ~MixEffectBlockMonitor() { }

public:
	HRESULT STDMETHODCALLTYPE QueryInterface(REFIID iid, LPVOID *ppv) {
		if (!ppv)
			return E_POINTER;
		
		if (iid == IID_IBMDSwitcherMixEffectBlockCallback)
		{
			*ppv = static_cast<IBMDSwitcherMixEffectBlockCallback*>(this);
			AddRef();
			return S_OK;
		}
		
		if (CFEqual(&iid, IUnknownUUID))
		{
			*ppv = static_cast<IUnknown*>(this);
			AddRef();
			return S_OK;
		}
		
		*ppv = NULL;
		return E_NOINTERFACE;
	}

	ULONG STDMETHODCALLTYPE AddRef(void)
	{
		return ::OSAtomicIncrement32(&mRefCount);
	}

	ULONG STDMETHODCALLTYPE Release(void)
	{
		int newCount = ::OSAtomicDecrement32(&mRefCount);
		if (newCount == 0)
			delete this;
		return newCount;
	}
	
	HRESULT PropertyChanged(BMDSwitcherMixEffectBlockPropertyId propertyId)
	{
		switch (propertyId)
		{
			case bmdSwitcherMixEffectBlockPropertyIdProgramInput:
				[mUiDelegate performSelectorOnMainThread:@selector(updateProgramButtonSelection) withObject:nil waitUntilDone:YES];
				break;
			case bmdSwitcherMixEffectBlockPropertyIdPreviewInput:
				[mUiDelegate performSelectorOnMainThread:@selector(updatePreviewButtonSelection) withObject:nil waitUntilDone:YES];
				break;
			case bmdSwitcherMixEffectBlockPropertyIdInTransition:
				[mUiDelegate performSelectorOnMainThread:@selector(updateInTransitionState) withObject:nil waitUntilDone:YES];
				break;
			case bmdSwitcherMixEffectBlockPropertyIdTransitionPosition:
				[mUiDelegate performSelectorOnMainThread:@selector(updateSliderPosition) withObject:nil waitUntilDone:YES];
				break;
			case bmdSwitcherMixEffectBlockPropertyIdTransitionFramesRemaining:
				[mUiDelegate performSelectorOnMainThread:@selector(updateTransitionFramesTextField) withObject:nil waitUntilDone:YES];
				break;
			case bmdSwitcherMixEffectBlockPropertyIdFadeToBlackFramesRemaining:
				[mUiDelegate performSelectorOnMainThread:@selector(updateFTBFramesTextField) withObject:nil waitUntilDone:YES];
				break;
			default:	// ignore other property changes not used for this sample app
				break;
		}
		return S_OK;
	}

private:
	ATEMCommanderDelegate*		mUiDelegate;
	int								mRefCount;
};

// Monitor the properties on Switcher Inputs.
// In this sample app we're only interested in changes to the Long Name property to update the PopupButton list
class InputMonitor : public IBMDSwitcherInputCallback
{
public:
	InputMonitor(IBMDSwitcherInput* input, ATEMCommanderDelegate* uiDelegate) : mInput(input), mUiDelegate(uiDelegate), mRefCount(1)
	{
		mInput->AddRef();
		mInput->AddCallback(this);
	}

protected:
	~InputMonitor()
	{
		mInput->RemoveCallback(this);
		mInput->Release();
	}
	
public:
	// IBMDSwitcherInputCallback interface
	HRESULT STDMETHODCALLTYPE QueryInterface(REFIID iid, LPVOID *ppv)
	{
		if (!ppv)
			return E_POINTER;
		
		if (iid == IID_IBMDSwitcherInputCallback)
		{
			*ppv = static_cast<IBMDSwitcherInputCallback*>(this);
			AddRef();
			return S_OK;
		}
		
		if (CFEqual(&iid, IUnknownUUID))
		{
			*ppv = static_cast<IUnknown*>(this);
			AddRef();
			return S_OK;
		}
		
		*ppv = NULL;
		return E_NOINTERFACE;
	}

	ULONG STDMETHODCALLTYPE AddRef(void)
	{
		return ::OSAtomicIncrement32(&mRefCount);
	}

	ULONG STDMETHODCALLTYPE Release(void)
	{
		int newCount = ::OSAtomicDecrement32(&mRefCount);
		if (newCount == 0)
			delete this;
		return newCount;
	}

	HRESULT PropertyChanged(BMDSwitcherInputPropertyId propertyId)
	{
		switch (propertyId)
		{
			case bmdSwitcherInputPropertyIdLongName:
				[mUiDelegate performSelectorOnMainThread:@selector(updatePopupButtonItems) withObject:nil waitUntilDone:YES];
			default:	// ignore other property changes not used for this sample app
				break;
		}
		
		return S_OK;
	}
	IBMDSwitcherInput* input() { return mInput; }
	
private:
	IBMDSwitcherInput*			mInput;
	ATEMCommanderDelegate*	mUiDelegate;
	int							mRefCount;
};

// Callback class to monitor switcher disconnection
class SwitcherMonitor : public IBMDSwitcherCallback
{
public:
	SwitcherMonitor(ATEMCommanderDelegate* uiDelegate) :	mUiDelegate(uiDelegate), mRefCount(1) { }

protected:
	virtual ~SwitcherMonitor() { }
	
public:
	// IBMDSwitcherCallback interface
	HRESULT STDMETHODCALLTYPE QueryInterface(REFIID iid, LPVOID *ppv)
	{
		if (!ppv)
			return E_POINTER;
		
		if (iid == IID_IBMDSwitcherCallback)
		{
			*ppv = static_cast<IBMDSwitcherCallback*>(this);
			AddRef();
			return S_OK;
		}
		
		if (CFEqual(&iid, IUnknownUUID))
		{
			*ppv = static_cast<IUnknown*>(this);
			AddRef();
			return S_OK;
		}
		
		*ppv = NULL;
		return E_NOINTERFACE;
	}

	ULONG STDMETHODCALLTYPE AddRef(void)
	{
		return ::OSAtomicIncrement32(&mRefCount);
	}

	ULONG STDMETHODCALLTYPE Release(void)
	{
		int newCount = ::OSAtomicDecrement32(&mRefCount);
		if (newCount == 0)
			delete this;
		return newCount;
	}
	
	// Switcher events ignored by this sample app
	HRESULT STDMETHODCALLTYPE	Notify(BMDSwitcherEventType eventType) { return S_OK; }
	
	HRESULT STDMETHODCALLTYPE	Disconnected(void)
	{
		[mUiDelegate performSelectorOnMainThread:@selector(switcherDisconnected) withObject:nil waitUntilDone:YES];
		return S_OK;
	}
	
private:
	ATEMCommanderDelegate*	mUiDelegate;
	int							mRefCount;
};


@implementation ATEMCommanderDelegate

- (id) initWithIP: (NSString*) ip{
    
    if([super init]) {
        
        mSwitcherDiscovery = NULL;
        mSwitcher = NULL;
        mMixEffectBlock = NULL;
        mSwitcherTransitionParameters = NULL;
        
        mSwitcherMonitor = new SwitcherMonitor(self);
        mMixEffectBlockMonitor = new MixEffectBlockMonitor(self);
        
        mMixEffectBlockMonitor::QueryInterface(<#REFIID iid#>, <#LPVOID *ppv#>)
        
        mMoveSliderDownwards = false;
        mCurrentTransitionReachedHalfway = false;
        
        mSwitcherDiscovery = CreateBMDSwitcherDiscoveryInstance();
        if (! mSwitcherDiscovery)
        {
            NSLog(@"Could not create Switcher Discovery Instance.\nATEM Switcher Software may not be installed.\n");
        }
        
        self->ipaddress = [[NSString alloc] initWithString:ip];
        
        [self switcherDisconnected];		// start with switcher disconnected
        
        
    }
    
    return self;
    
}


- (void) quit {
    
	mSwitcherMonitor->Release();
	mSwitcherMonitor = NULL;
	
	mMixEffectBlockMonitor->Release();
	mMixEffectBlockMonitor = NULL;

	if (mSwitcherDiscovery)
	{
		mSwitcherDiscovery->Release();
		mSwitcherDiscovery = NULL;
	}
}


//
// Actions
//
- (bool) connectToATEM {
//	NSString* address = [mAddressTextField stringValue];
	

    
	BMDSwitcherConnectToFailure failReason;
	
    NSString *ip = [NSString stringWithFormat:@"%@", self->ipaddress];
    
    
	// Note that ConnectTo() can take several seconds to return, both for success or failure,
	// depending upon hostname resolution and network response times, so it may be best to
	// do this in a separate thread to prevent the main GUI thread blocking.
	HRESULT hr = mSwitcherDiscovery->ConnectTo((__bridge CFStringRef)ip, &mSwitcher, &failReason);
	if (SUCCEEDED(hr))
	{
		[self switcherConnected];
        return true;
	}
	else
	{
		NSString* reason;
		switch (failReason)
		{
			case bmdSwitcherConnectToFailureNoResponse:
				reason = @"No response from Switcher\n\n";
				break;
			case bmdSwitcherConnectToFailureIncompatibleFirmware:
				reason = @"Switcher has incompatible firmware\n\n";
				break;
			default:
				reason = @"Connection failed for unknown reason\n\n";
		}
		NSLog(@"%@", reason);
        return false;
	}
}


- (void)cutButtonPressed {
	mMixEffectBlock->PerformCut();
}

- (void)autoButtonPressed {
	mMixEffectBlock->PerformAutoTransition();
}

- (void)FTBButtonPressed {
	mMixEffectBlock->PerformFadeToBlack();
}

- (void)switchPreviewButtonPressed:(int)button {
    BMDSwitcherInputId selectedPreviewInput = button;
	mMixEffectBlock->SetInt(bmdSwitcherMixEffectBlockPropertyIdPreviewInput, selectedPreviewInput);
}

- (void)switchLiveButtonPressed:(int)button {
    BMDSwitcherInputId selectedProgramInput = button;
	mMixEffectBlock->SetInt(bmdSwitcherMixEffectBlockPropertyIdProgramInput, selectedProgramInput);

}

- (void)switchEffectButtonPressed:(int)button {
    
}

- (void)takeOverlayButtonPressed {

}

- (void)fadeOverlayButtonPressed {
    IBMDSwitcherTransitionParameters::SetNextTransitionSelection(bmdSwitcherTransitionSelectionKey1);
}

/*
- (IBAction)programPopupChanged:(id)sender
{
	BMDSwitcherInputId selectedProgramInput = [[mProgramInputsPopup selectedItem] tag];
	mMixEffectBlock->SetInt(bmdSwitcherMixEffectBlockPropertyIdProgramInput, selectedProgramInput);
}

- (IBAction)previewPopupChanged:(id)sender
{
	BMDSwitcherInputId selectedPreviewInput = [[mPreviewInputsPopup selectedItem] tag];
	mMixEffectBlock->SetInt(bmdSwitcherMixEffectBlockPropertyIdPreviewInput, selectedPreviewInput);
}

- (IBAction)sliderChanged:(id)sender
{
	double position = [mSlider doubleValue] / 100.0;
	if (mMoveSliderDownwards)
		position = (100 - [mSlider doubleValue]) / 100.0;		// deal with flipped slider handle position

	mMixEffectBlock->SetFloat(bmdSwitcherMixEffectBlockPropertyIdTransitionPosition, position);
}
*/
 
- (void)switcherConnected
{
	HRESULT result;
	IBMDSwitcherMixEffectBlockIterator* iterator = NULL;
	IBMDSwitcherInputIterator* inputIterator = NULL;
	
//	[mConnectButton setEnabled:NO];			// disable Connect button while connected
	

    
//	NSString* productName;
//	if (FAILED(mSwitcher->GetProductName((CFStringRef)&productName)) {
//		NSLog(@"Could not get switcher product name");
//		return;
//	}
	
//	[mSwitcherNameLabel setStringValue:productName];
//	[productName release];
	
	mSwitcher->AddCallback(mSwitcherMonitor);
	
	// Create an InputMonitor for each input so we can catch any changes to input names
	result = mSwitcher->CreateIterator(IID_IBMDSwitcherInputIterator, (void**)&inputIterator);
	if (SUCCEEDED(result))
	{
		IBMDSwitcherInput* input = NULL;
		
		// For every input, install a callback to monitor property changes on the input
		while (S_OK == inputIterator->Next(&input))
		{
			InputMonitor* inputMonitor = new InputMonitor(input, self);
			input->Release();
			mInputMonitors.push_back(inputMonitor);
		}
		inputIterator->Release();
		inputIterator = NULL;
	}
		
	// Get the mix effect block iterator
	result = mSwitcher->CreateIterator(IID_IBMDSwitcherMixEffectBlockIterator, (void**)&iterator);
	if (FAILED(result))
	{
		NSLog(@"Could not create IBMDSwitcherMixEffectBlockIterator iterator");
		goto finish;
	}
	
	// Use the first Mix Effect Block
	if (S_OK != iterator->Next(&mMixEffectBlock))
	{
		NSLog(@"Could not get the first IBMDSwitcherMixEffectBlock");
		goto finish;
	}
	
	mMixEffectBlock->AddCallback(mMixEffectBlockMonitor);
	
	[self mixEffectBlockBoxSetEnabled:YES];
	[self updatePopupButtonItems];
	[self updateSliderPosition];
	[self updateTransitionFramesTextField];
	[self updateFTBFramesTextField];
	
finish:
	if (iterator)
		iterator->Release();
}

- (void)switcherDisconnected
{
//	[mConnectButton setEnabled:YES];			// enable connect button so user can re-connect
//	[mSwitcherNameLabel setStringValue:@""];
	
	[self mixEffectBlockBoxSetEnabled:NO];
	
	// cleanup resources created when switcher was connected
	for (std::list<InputMonitor*>::iterator it = mInputMonitors.begin(); it != mInputMonitors.end(); ++it)
	{
		(*it)->Release();
	}
	mInputMonitors.clear();
	
	if (mMixEffectBlock)
	{
		mMixEffectBlock->RemoveCallback(mMixEffectBlockMonitor);
		mMixEffectBlock->Release();
		mMixEffectBlock = NULL;
	}
	
	if (mSwitcher)
	{
		mSwitcher->RemoveCallback(mSwitcherMonitor);
		mSwitcher->Release();
		mSwitcher = NULL;
	}
}

//
// GUI updates
//
- (void)updatePopupButtonItems
{
	HRESULT result;
	IBMDSwitcherInputIterator* inputIterator = NULL;
	IBMDSwitcherInput* input = NULL;
	
	result = mSwitcher->CreateIterator(IID_IBMDSwitcherInputIterator, (void**)&inputIterator);
	if (FAILED(result))
	{
		NSLog(@"Could not create IBMDSwitcherInputIterator iterator");
		return;
	}
	
	while (S_OK == inputIterator->Next(&input))
	{
//		NSString* name;
		BMDSwitcherInputId id;

		input->GetInputId(&id);
//		input->GetString(bmdSwitcherInputPropertyIdLongName, (CFStringRef*)&name);
		
/*		[mProgramInputsPopup addItemWithTitle:name];
		[[mProgramInputsPopup lastItem] setTag:id];
		
		[mPreviewInputsPopup addItemWithTitle:name];
		[[mPreviewInputsPopup lastItem] setTag:id];
*/
		input->Release();
	}
	inputIterator->Release();
	
	[self updateProgramButtonSelection];
	[self updatePreviewButtonSelection];
}

- (void)updateProgramButtonSelection
{
	BMDSwitcherInputId	programId;
	mMixEffectBlock->GetInt(bmdSwitcherMixEffectBlockPropertyIdProgramInput, &programId);
//	[mProgramInputsPopup selectItemWithTag:programId];
}

- (void)updatePreviewButtonSelection
{
	BMDSwitcherInputId	previewId;
	mMixEffectBlock->GetInt(bmdSwitcherMixEffectBlockPropertyIdPreviewInput, &previewId);
//	[mPreviewInputsPopup selectItemWithTag:previewId];
}

- (void)updateInTransitionState
{
	bool inTransition;
	mMixEffectBlock->GetFlag(bmdSwitcherMixEffectBlockPropertyIdInTransition, &inTransition);
	
	if (inTransition == false)
	{
		// Toggle the starting orientation of slider handle if a transition has passed through halfway
		if (mCurrentTransitionReachedHalfway)
		{
			mMoveSliderDownwards = ! mMoveSliderDownwards;
			[self updateSliderPosition];
		}
		
		mCurrentTransitionReachedHalfway = false;
	}
}

- (void)updateSliderPosition
{
	double position;
	mMixEffectBlock->GetFloat(bmdSwitcherMixEffectBlockPropertyIdTransitionPosition, &position);
	
	// Record when transition passes halfway so we can flip orientation of slider handle at the end of transition
	mCurrentTransitionReachedHalfway = (position >= 0.50);

	double sliderPosition = position * 100;
	if (mMoveSliderDownwards)
		sliderPosition = 100 - position * 100;		// slider handle moving in opposite direction
	
//	[mSlider setDoubleValue:sliderPosition];
//	[mLevelIndicator setDoubleValue:position * 20];
}

- (void)updateTransitionFramesTextField
{
	int64_t framesRemaining;
	mMixEffectBlock->GetInt(bmdSwitcherMixEffectBlockPropertyIdTransitionFramesRemaining, &framesRemaining);
//	[mTransitionFramesTextField setIntegerValue:framesRemaining];
}

- (void)updateFTBFramesTextField
{
	int64_t framesRemaining;
	mMixEffectBlock->GetInt(bmdSwitcherMixEffectBlockPropertyIdFadeToBlackFramesRemaining, &framesRemaining);
//	[mFTBFramesTextField setIntegerValue:framesRemaining];
}

- (void)mixEffectBlockBoxSetEnabled:(bool)enabled
{
//	[mProgramInputsPopup setEnabled:enabled];
//	[mPreviewInputsPopup setEnabled:enabled];
//	[mCutButton setEnabled:enabled];
//	[mAutoButton setEnabled:enabled];
//	[mFTBButton setEnabled:enabled];
//	[mSlider setEnabled:enabled];
//	[mTransitionFramesTextField setEnabled:enabled];
//	[mFTBFramesTextField setEnabled:enabled];
}

@end
